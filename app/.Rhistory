}
dice_result
dice_result = c()
for (i in 1:1000)   {
dice_result <-append(dice_result,dice_game(i))
}
dice_result
install.packages(c("digest", "tidyselect"))
library("yaml", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:yaml", unload=TRUE)
library("yaml", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("bindr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("tcltk", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("foreign", "survival"))
# define fibonacci
fibo <- function(x) {
if (x == 1 || x == 2  )
return (1)
else
return (fibo(x -2) + fibo(x -1) )
}
## find under 4M fibo value
total=c()
milli <- 4e6
for (i in 1:35 ) {
if(  fibo(i) < milli ) {
total <-  append(total,fibo(i))
}
else {
break
}
}
## Even value Sum
is_even = function(x){
if (x %% 2 == 0 )
return (x)
else
return (FALSE)
}
sum_of_even = sum(sapply(total,is_even))
print(sum_of_even)
mat1 <- matrix(c(1,2,3,4),2,2)
vec1 <- c(3,4)
mat1 %*% vec1
vec1[1]
# define Function
multi = function(x,y) {
v <- c()
for ( i in 1:nrow(x)) {
sum_ = 0
for (j in 1:ncol(x)){
sum_ = sum_ + ( x[i,j] * y[j] )
print(sum_)
if ( j == ncol(x) )
v <- append(v, sum_ )
}
}
return (v)
}
q2 <- multi(mat1,vec1)
q2
sp = c(1:10)
define_mad = function(x,y) {
return (abs(x-y))
}
q3 = median(sort(sapply(sp, define_mad , y = median(sp))))
q3
## Question 4
Names <- "John Andrew Thomas"
mail = "@gmail"
vec2 <- unlist(strsplit(Names," "))
to_mail_address_Attach = function(x) {
v <- unlist(strsplit(x," "))
mail <- "@gmail"
result <- c()
for (i in 1:length(v)) {
txt <- paste(v[i], mail,sep = "")
if (i == 1 )
result <- txt
else
result <- paste(result,txt,sep = ";"  )
}
return(result)
}
q4 = to_mail_address_Attach(Names)
print(q4)
## Quiz 5
lst1 = c('a','b','c','d','e')
lst2 = c('a','b','c','d','e')
as.vector(sapply(lst1, paste, lst2, sep=""))
compare("EPS568","Summer")
#"Equal Length"
compare("EPS568","SummerA")
dice_game = function(x) {
dice = sum(sample(1:6, 2, replace=T))
result = c()
if (dice == 7 || dice == 11 )
return ('Win ')
else if (dice == 2 || dice == 3 || dice == 12  )
return ("Loss")
else ## 4, 5, 6, 8, 9, 10 {
point = dice
while (1) {
dice = sum(sample(1:6, 2, replace=T))
if (dice == point) {
return ('Win')
break
}
else if (dice == 7 ) {
return ('Loss')
break
}
}
}
dice_result = c()
for (i in 1:1000)   {
dice_result <-append(dice_result,dice_game(i))
}
dice_result
library(rsconnect)
exit
shiny::runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
counts <- as.data.frame(table(jobs$positions, jobs$education))
colnames(counts) <- c("Positions", "Education", "Freq")
edu1 <- ggplot(data = filter(counts, counts$Positions != "engineer"), aes(Positions, Freq)) +
geom_bar(aes(fill = Education), position = "dodge",stat = "identity") +
ggtitle("Positions distribution based on Education")
ed2 <- ggplot(data = filter(counts, counts$Positions == "engineer"), aes(Positions, Freq)) +
geom_bar(aes(fill = Education), position = "dodge",stat = "identity") +
ggtitle("Positions distribution based on Education")
multiplot(edu1, edu2)
multiplot(edu1, edu2)
library(ggplot2)
multiplot(edu1, edu2)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(edu1, edu2)
edu1 <- ggplot(data = filter(counts, counts$Positions != "engineer"), aes(Positions, Freq)) +
geom_bar(aes(fill = Education), position = "dodge",stat = "identity") +
ggtitle("Positions distribution based on Education")
ed2 <- ggplot(data = filter(counts, counts$Positions == "engineer"), aes(Positions, Freq)) +
geom_bar(aes(fill = Education), position = "dodge",stat = "identity") +
ggtitle("Positions distribution based on Education")
grid.arrange(edu1, edu2)
edu2 <- ggplot(data = filter(counts, counts$Positions == "engineer"), aes(Positions, Freq)) +
geom_bar(aes(fill = Education), position = "dodge",stat = "identity") +
ggtitle("Positions distribution based on Education")
grid.arrange(edu1, edu2)
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
edu_temp <- position_reactive()
runApp('nyc_bootcamp/03.project/way_to_googler/app')
counts <- as.data.frame(table(edu_temp$positions, edu_temp$education))
View(counts)
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
counts <- as.data.frame(table(edu_temp$positions, edu_temp$education))
edu_temp <- jobs  %>% filter(positions == engineer )
edu_temp <- jobs  %>% filter(positions == 'engineer' )
View(edu_temp)
counts <- as.data.frame(table(edu_temp$positions, edu_temp$education))
View(counts)
View(counts)
View(counts)
colnames(counts) <- c("Positions", "Education", "Freq")
View(counts)
View(counts)
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
View(edu_temp)
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
jobs %>% filter(., positions = 'engineer')
jobs %>% filter(., positions == 'engineer')
jobs %>% filter(., positions == 'engineer') %>%
select(., positions,  education)
jobs %>% filter(., positions == 'engineer') %>%
select(., positions,  education) %>%
group_by(., positions,  education)
jobs %>% filter(., positions == 'engineer') %>%
select(., positions,  education) %>%
group_by(., positions,  education) %>% count()
edu_temp <- jobs %>% filter(., positions == 'engineer') %>%
select(., positions,  education) %>%
group_by(., positions,  education) %>% count()
View(edu_temp)
View(edu_temp)
colnames(edu_temp) <- c("Positions", "Education", "Freq")
View(edu_temp)
edu_temp$Education <- factor(edu_temp$Education,
levels = edu_temp$Education[order(-edu_temp$Freq,decreasing = TRUE)])
edu_temp$Education <- factor(edu_temp$Education,
levels = edu_temp$Education[order(-edu_temp$Freq,decreasing = TRUE)])
View(edu_temp)
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
job_type <- jobs %>% count(job_type)
job_type$n
ggplot(job_type, aes(x = "", y=n, fill = factor(job_type))) +
geom_bar(width = 1, stat = "identity") +
theme(#axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Google Job Classification",
caption="Google Job Skills") + coord_polar(theta = "y", start=0)
runApp('nyc_bootcamp/03.project/way_to_googler/app')
job_type <- ggplot(job_type, aes(x = "", y=n, fill = factor(job_type))) +
geom_bar(width = 1, stat = "identity") +
theme(#axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Google Job Classification",
caption="Google Job Skills") + coord_polar(theta = "y", start=0)
ggplotly(job_type)
job_type
job_type <- jobs %>% count(job_type)
View(job_type)
p <- plot_ly(job_type, labels = ~job_type, values = ~n, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', X1960, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
p <- plot_ly(job_type, labels = ~job_type, values = ~n, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', n, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
packageVersion('plotly')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
ggplotly(p)
## pie chart count
p <- plot_ly(job_type, labels = ~job_type, values = ~n, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
#text = ~paste('$', n, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
ggplotly(p)
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
ggplotly(p)
p33 <- mtcars %>%
group_by(manuf) %>%
summarize(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p <- plot_ly(job_type, labels = ~job_type, values = ~n, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
#text = ~paste('$', n, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'Google Job composition')
p
p
## pie chart count
ggplot(data=job_type)+
geom_bar(aes(x="", y=n, fill=job_type), stat="identity", width = 1)+
coord_polar("y", start=0)+
theme_void()
ggplot(data=job_type)+
geom_bar(aes(x="", y=n, fill=job_type), stat="identity", width = 1)+
coord_polar("y", start=0)+
theme_void()
+ geom_text(aes(x=1, y = cumsum(job_type) - n/2, label=label))
ggplot(data=job_type)+
geom_bar(aes(x="", y=n, fill=job_type), stat="identity", width = 1)+
coord_polar("y", start=0)+
theme_void()
+ geom_text(aes(x=1, y = cumsum(n) - n/2, label=label))
ggplot(data=job_type)+
geom_bar(aes(x="", y=n, fill=job_type), stat="identity", width = 1)+
coord_polar("y", start=0, direction = -1)+
theme_void()+
geom_text(aes(x=1, y = cumsum(n) - n/2, label=label))
data$label <- scales::percent(job_type$n)
## pie chart count
library(googleVis)
op <- options(gvis.plot.tag = "chart")
pie <- gvisPieChart(job_type, options = list(title = "Sales per region",
width = 1000, height = 500))
plot(pie)
library(googleVis)
op <- options(gvis.plot.tag = "chart")
pie <- gvisPieChart(job_type, options = list(title = "Sales per region",
width = 1000, height = 500))
plot(pie)
## pie chart count
job_type %>%
group_by(job_type) %>%
summarise(volume = sum(n)) %>%
mutate(share=volume/sum(volume)) %>%
ungroup() %>%
arrange(desc(volume)) %>%
mutate(job_type=factor(job_type, levels = as.character(job_type))) %>%
ggplot(aes(x="", y= share, fill=job_type)) +
geom_col() +
geom_text(aes(label = scales::percent(round(share,3))), position = position_stack(vjust = 0.5))+
coord_polar(theta = "y") +
theme_void()
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
## pie chart count
p <- plot_ly(job_type, labels = ~job_type, values = ~n, type = 'pie') %>%
layout(title = 'Google',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
p <- plot_ly(y = ~rnorm(50), type = "box") %>%
add_trace(y = ~rnorm(50, 1))
p
google_jobs <- read.csv("../data/google_jobs.csv", header = TRUE)
p <- plot_ly(y = ~jobs$experience, type = "box") %>%
add_trace(y = ~jobs$domain)
p
p <- plot_ly(y = ~jobs$experience, type = "box")
p
rnorm(50)
rnorm(50,1)
p <- plot_ly(y = ~jobs$experience, type = "box")
p
help('plot_ly')
p <- ggplot(dat, aes(x=jobs$domain, y=jobs$experience)) + geom_boxplot()
p <- ggplotly(p)
p <- ggplot(jobs, aes(x=jobs$domain, y=jobs$experience)) + geom_boxplot()
p <- ggplotly(p)
p
p <- ggplot(jobs, aes(x=jobs$domain, y=jobs$experience)) + geom_boxplot() %>%
ggplotly()
p <- ggplot(jobs, aes(x=jobs$domain, y=jobs$experience),fill=cond) + geom_boxplot()
p <- ggplotly(p)
p
p <- ggplot(jobs, aes(x=jobs$domain, y=jobs$experience,fill=cond )) + geom_boxplot()
p <- ggplotly(p)
p
p <- ggplot(jobs, aes(x= domain, y= experience, fill =c ond )) + geom_boxplot()
p <- ggplot(jobs, aes(x= domain, y= experience, fill =cond )) + geom_boxplot()
p <- ggplotly(p)
set.seed(1234)
dat <- data.frame(cond = factor(rep(c("A","B"), each=200)), rating = c(rnorm(200),rnorm(200, mean=.8)))
p <- ggplot(dat, aes(x=cond, y=rating, fill=cond)) + geom_boxplot()
p <- ggplotly(p)
p
p <- ggplot(jobs, aes(x=domain, y=experience, fill=domain)) + geom_boxplot()
p <- ggplotly(p)
p
runApp('nyc_bootcamp/03.project/way_to_googler/app')
shiny::runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
shiny::runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
wc_df <- filter(jobs, Responsibilities)
wc_df <- select(jobs, Responsibilities)
a1 <- jobs$Responsibilities
a2 <- wc_df
print(str(a1))
print(str( wc_df   ))
a3 <- names(wc_df)
print(str(select(wc_df,a3))
print(str(select(wc_df,a3)))
print(str(select(wc_df,a3)))
print(str(select(a2,a3)))
print(str(a2))
print(str(a1))
print(str(a2.values()))
a2 <- as.matrix(wc_df)
print(str(a2))
print(str(a2[,]))
print(str(a1))
print(str(a2[,]))
wc <- rquery.wordcloud(a2[,], type=c("text", "url", "file"),
lang="english", excludeWords = NULL,
textStemming = FALSE,  colorPalette="Dark2",
max.words=100, min.freq =10 )
wc
wc <- rquery.wordcloud(a2[,], type=c("text", "url", "file"),
lang="english", excludeWords = NULL,
textStemming = FALSE,  colorPalette="Dark2",
max.words=100, min.freq =10 )
#wc_df <- as.factor(wc_df)
wc <- rquery.wordcloud(a2 , type=c("text", "url", "file"),
lang="english", excludeWords = NULL,
textStemming = FALSE,  colorPalette="Dark2",
max.words=100, min.freq =10 )
wc
wc <- rquery.wordcloud(a2 , type=c("text", "url", "file"),
lang="english", excludeWords = NULL,
textStemming = FALSE,  colorPalette="Dark2",
max.words=100, min.freq =10 )
runApp('nyc_bootcamp/03.project/way_to_googler/app')
gc()
runApp('nyc_bootcamp/03.project/way_to_googler/app')
shiny::runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
runApp('nyc_bootcamp/03.project/way_to_googler/app')
